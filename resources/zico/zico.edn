; This is default configuration for ZICO collector.

{

 :home-dir #or [#env ZICO_HOME, #prop zico.home, #prop user.dir]

 ; HTTP settings
 :http     {:port                8640
            :host                "0.0.0.0"
            :http?               true
            :join?               false,
            :daemon?             false
            :min-threads         2
            :max-threads         32
            :max-queued-requests 256
            :max-form-size       67108864                                       ; 64MB for big traces
            ;:tls-ciphers [
            ;   "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
            ;   "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
            ;   "TLS_RSA_WITH_AES_128_CBC_SHA256", "TLS_RSA_WITH_AES_128_CBC_SHA",
            ;   "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA"]
            }

 :log      {:path            #join [#ref [:home-dir] "/log"]
            :dump            false
            :dump-path       #join [#ref [:home-dir] "/log/dump.log"]
            :mode            :time-rolling
            :max-history     7
            :max-size        16777216
            :current-fname   "zico.log"
            :history-fname   "zico-%d{yyyy-M-dd-HH-mm}-%i.log.gz"
            :console-pattern "%-12date{YYYY-MM-dd HH:mm:ss.SSS} %-5level - %msg%n"
            :file-pattern    "%-12date{YYYY-MM-dd HH:mm:ss.SSS} %-5level - %msg%n"
            :file-level      :debug
            :console-level   :debug
            :log-levels      {:ROOT         :debug
                              :org.eclipse  :info
                              }}

 :auth {:type :http-basic                                   ; :none, :http-basic
        :users {
          "admin" "SSHA512:iKMGEUtcBLP6jLHZl1kDSRX6yN0D2L3DBPXMuAk5uM1Af7mUHAk5ApYW9j24yGNxZzCcNrZ4TP62ky2PlToqtQ=="
          "user" "SSHA512:iKMGEUtcBLP6jLHZl1kDSRX6yN0D2L3DBPXMuAk5uM1Af7mUHAk5ApYW9j24yGNxZzCcNrZ4TP62ky2PlToqtQ=="
        } ; both passwords: 'zico'

        :admin-users #{"admin"}
        }

 :metrics {:type :prometheus
           :prefix "zico"
           :step 60
           :threads 2
           :conn-timeout 1
           :read-timeout 1
           :batch-size 10000
           :host "127.0.0.1:9200"
           :index "zico_metrics"
           :username "zico"
           :password "zico"}

 ; Configuration of main data store
 :tstore {:type                 #or [#env ZICO_TSTORE_TYPE #prop zico.tstore.type :memory]
          :url                  "http://127.0.0.1:9200"
          :username             "zico"
          :password             "zico"
          :instance             "00"
          :name                 "zico"
          :session-timeout      90
          :post-merge-pause     30
          :pre-merge-segments   4
          :final-merge-segments 1
          :memstore-size-max    768
          :memstore-size-del    256
          :seq-block-size       16
          :index-size           16384
          :index-overcommit     1024
          :index-count          16
          :flattened-attrs      false
          :timeout              60
          :threads              32
          :trust-store-type     "jks"
          :keystore-type        "jks"
          ; Elastic index creation parameters
          :number_of_shards     1
          :number_of_replicas   0
          :index.mapping.total_fields.limit 16384}

 :filter-defs
           [{:attr "component", :description "Component", :icon "awe/puzzle#light"}
            {:attr "local.service", :description "Service", :icon "awe/cubes#light"}]

 :attr-transforms [
   ; { :match #"foo" :replace "bar" }
 ]

 :trace-types
           {:db  {:component "db", :render :db.statement, :icon "awe/database#darkgreen"}
            :http {:component "http", :render :http.url, :icon "awe/globe#steelblue"}
            :amqp {:component "amqp", :render :call.method, :icon "awe/paper-plane-empty#darkred"}
            :spring {:component "spring", :render :method, :icon "awe/leaf#darkgreen"}
            :breaker {:component "breaker", :render :call.method, :icon "awe/flash#darkkhaki"}
            :job {:component "job", :render :call.method, :icon "awe/clock#darkred"}
            :jms {:component "jms", :render :call.method, :icon "awe/paper-plane-empty#darkkhaki"}
            :ejb {:component "ejb", :render :call.method, :icon "awe/cube#steelblue"}
            }
 }

